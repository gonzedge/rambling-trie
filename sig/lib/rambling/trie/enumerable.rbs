module Rambling
  module Trie
    module Enumerable[TValue < _Inspect]
      include ::Enumerable[String]

      EMPTY_ENUMERATOR: Enumerator[String, void]

      alias size count

      def each: { (String) -> void } -> (Enumerator[String, void] | Enumerable[TValue])

      private

      # abstract methods

      def as_word: -> String

      def terminal?: -> bool

      def children_tree: -> Hash[Symbol, Nodes::Node[TValue]]
    end
  end
end
