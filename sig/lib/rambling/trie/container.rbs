module Rambling
  module Trie
    class Container
      include ::Enumerable[String]

      @compressor: Compressor

      attr_reader root: Nodes::Node

      def initialize: (Nodes::Node, Compressor) ?{ (Container) -> void } -> void

      def add: (String) -> Nodes::Node

      def concat: (Array[String]) -> Array[Nodes::Node]

      def compress!: -> Container

      def compress: -> Container

      def each: { (String) -> void } -> (Enumerator[String, void] | Enumerable)

      def partial_word?: (String) -> bool

      def push: (*String) -> Array[Nodes::Node]

      def word?: (String) -> bool

      def scan: (String) -> Array[String]

      def words_within: (String) -> Array[String]

      def words_within?: (String) -> bool

      def ==: (Container) -> bool

      def []: (Symbol) -> Nodes::Node

      def children: -> Array[Nodes::Node]

      def children_tree: -> Hash[Symbol, Nodes::Node]

      def compressed?: -> bool

      def to_a: -> Array[String]

      def key?: (Symbol) -> bool

      def size: -> Numeric

      alias include? word?
      alias match? partial_word?
      alias words? scan
      alias << add
      alias has_key? key?
      alias has_letter? key?

      private

      attr_reader compressor: Compressor
      attr_writer root: Nodes::Node

      def words_within_root: (String) ?{ (String) -> void } -> (Enumerator[String, void]?)

      def compress_root: -> Nodes::Compressed

      def char_symbols: (String) -> Array[Symbol]
    end
  end
end
