module Rambling
  module Trie
    module Nodes
      class Node[TValue < _Inspect]
        include Compressible[TValue]
        include Enumerable[TValue]
        include Comparable[TValue]
        include Stringifyable[TValue]
        include Inspectable[TValue]

        attr_reader letter: Symbol?
        attr_accessor children_tree: Hash[Symbol, Node[TValue]]
        attr_accessor parent: Node[TValue]?
        attr_accessor value: TValue?

        def initialize: (?Symbol?, ?Node[TValue]?, ?Hash[Symbol, Node[TValue]]) -> void

        def add: (Array[Symbol], ?TValue?) -> Node[TValue]

        def children: -> Array[Node[TValue]]

        def first_child: -> Node[TValue]?

        def match_prefix: (Array[String]) { (String) -> void } -> Enumerator[String, void]

        def root?: -> bool

        def scan: (Array[String]) -> Node[TValue]

        def terminal?: -> bool

        def terminal!: -> Node[TValue]

        def letter=: (String | Symbol?) -> Symbol?

        def compressed?: -> bool

        def partial_word?: (Array[String]) -> bool

        def word?: (Array[String]) -> bool

        def []: (Symbol) -> Node[TValue]?

        def []=: (Symbol, Node[TValue]) -> Node[TValue]

        def key?: (Symbol) -> bool

        def delete: (Symbol) -> Node[TValue]?

        alias has_key? key?

        private

        attr_accessor terminal: bool?

        def missing: -> Node[TValue]

        # abstract methods

        def children_match_prefix: (Array[String]) { (String) -> void } -> Enumerator[String, void]

        def partial_word_chars?: (Array[String]) -> bool

        def word_chars?: (Array[String]) -> bool

        def closest_node: (Array[String]) -> Node[TValue]
      end
    end
  end
end
